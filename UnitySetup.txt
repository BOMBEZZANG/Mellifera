
  ðŸŽ¯ Unity Setup Guide for Mellifera: Hive OS

  1. Unity Project Setup

  Initial Project Creation

  1. Create New Project
    - Open Unity Hub
    - Click "New Project"
    - Select "2D (URP)" template
    - Name: "Mellifera_HiveOS"
    - Location: Choose your desired folder
    - Click "Create"
  2. Import Required Packages
    - Window â†’ Package Manager
    - Install these packages:
        - Input System (2.0.0+)
      - TextMeshPro (3.0.0+)
      - 2D Pixel Perfect (optional but recommended)

  2. Scene Setup

  Main Scene Hierarchy Structure

  SampleScene
  â”œâ”€â”€ GameManager (Empty GameObject)
  â”œâ”€â”€ UI Canvas
  â”‚   â”œâ”€â”€ ResourceDisplayUI
  â”‚   â”œâ”€â”€ NotificationSystem
  â”‚   â””â”€â”€ CommandPanel
  â”œâ”€â”€ Hive
  â”‚   â”œâ”€â”€ HiveCells (Empty GameObject - Container)
  â”‚   â””â”€â”€ BeeSpawnPoint (Empty GameObject)
  â”œâ”€â”€ ExternalMap
  â”‚   â”œâ”€â”€ ResourceNodes (Empty GameObject - Container)
  â”‚   â”œâ”€â”€ Hazards (Empty GameObject - Container)
  â”‚   â””â”€â”€ MapBoundaries (Empty GameObject)
  â”œâ”€â”€ Cameras
  â”‚   â”œâ”€â”€ Main Camera
  â”‚   â””â”€â”€ UI Camera (if needed)
  â””â”€â”€ Audio
      â”œâ”€â”€ AudioManager (Empty GameObject)
      â””â”€â”€ AudioSources (Empty GameObject - Container)

  3. GameObject Creation and Script Assignment

  3.1 GameManager Setup

  Create GameManager GameObject:
  1. Create Empty GameObject: Right-click in Hierarchy â†’ Create Empty
  2. Name it: GameManager
  3. Position: (0, 0, 0)

  Add Scripts to GameManager:
  1. Select GameManager
  2. Add Component â†’ Scripts:
    - GameManager.cs
    - TimeManager.cs
    - ResourceManager.cs
    - BeeManager.cs
    - TaskManager.cs
    - ConfigurationManager.cs

  GameManager Configuration:
  // In Inspector for GameManager component:
  - Current State: MainMenu
  - Time Manager: (Auto-assigned)
  - Resource Manager: (Auto-assigned)
  - Bee Manager: (Auto-assigned)
  - Task Manager: (Auto-assigned)
  - External Map Controller: (Assign later)

  3.2 UI Canvas Setup

  Create UI Canvas:
  1. Right-click in Hierarchy â†’ UI â†’ Canvas
  2. Name: UI Canvas
  3. Canvas component settings:
    - Render Mode: Screen Space - Overlay
    - UI Scale Mode: Scale With Screen Size
    - Reference Resolution: 1920x1080

  Add EventSystem:
  - Should be created automatically with Canvas
  - If not: Right-click â†’ UI â†’ Event System

  3.3 ResourceDisplayUI Setup

  Create ResourceDisplayUI:
  1. Right-click on UI Canvas â†’ UI â†’ Empty
  2. Name: ResourceDisplayUI
  3. Add Component: ResourceDisplayUI.cs

  Create UI Elements for ResourceDisplayUI:
  ResourceDisplayUI
  â”œâ”€â”€ ResourcePanel (UI â†’ Panel)
  â”‚   â”œâ”€â”€ HoneyDisplay (UI â†’ Horizontal Layout Group)
  â”‚   â”‚   â”œâ”€â”€ HoneyIcon (UI â†’ Image)
  â”‚   â”‚   â””â”€â”€ HoneyText (UI â†’ Text - TextMeshPro)
  â”‚   â”œâ”€â”€ PollenDisplay (UI â†’ Horizontal Layout Group)
  â”‚   â”‚   â”œâ”€â”€ PollenIcon (UI â†’ Image)
  â”‚   â”‚   â””â”€â”€ PollenText (UI â†’ Text - TextMeshPro)
  â”‚   â”œâ”€â”€ BeeswaxDisplay (UI â†’ Horizontal Layout Group)
  â”‚   â”‚   â”œâ”€â”€ BeeswaxIcon (UI â†’ Image)
  â”‚   â”‚   â””â”€â”€ BeeswaxText (UI â†’ Text - TextMeshPro)
  â”‚   â””â”€â”€ RoyalJellyDisplay (UI â†’ Horizontal Layout Group)
  â”‚       â”œâ”€â”€ RoyalJellyIcon (UI â†’ Image)
  â”‚       â””â”€â”€ RoyalJellyText (UI â†’ Text - TextMeshPro)
  â”œâ”€â”€ PopulationPanel (UI â†’ Panel)
  â”‚   â”œâ”€â”€ TotalPopulationText (UI â†’ Text - TextMeshPro)
  â”‚   â”œâ”€â”€ WorkerBeesText (UI â†’ Text - TextMeshPro)
  â”‚   â””â”€â”€ QueenBeesText (UI â†’ Text - TextMeshPro)
  â”œâ”€â”€ TimePanel (UI â†’ Panel)
  â”‚   â”œâ”€â”€ CurrentCycleText (UI â†’ Text - TextMeshPro)
  â”‚   â”œâ”€â”€ CurrentSeasonText (UI â†’ Text - TextMeshPro)
  â”‚   â”œâ”€â”€ TimeOfDayText (UI â†’ Text - TextMeshPro)
  â”‚   â”œâ”€â”€ DayNightIndicator (UI â†’ Image)
  â”‚   â”œâ”€â”€ CycleProgressBar (UI â†’ Slider)
  â”‚   â””â”€â”€ DayProgressBar (UI â†’ Slider)
  â””â”€â”€ WarningPanel (UI â†’ Panel)
      â”œâ”€â”€ LowHoneyWarning (UI â†’ Image)
      â”œâ”€â”€ LowPollenWarning (UI â†’ Image)
      â”œâ”€â”€ LowRoyalJellyWarning (UI â†’ Image)
      â””â”€â”€ WinterWarning (UI â†’ Image)

  ResourceDisplayUI Script Assignment:
  1. Select ResourceDisplayUI GameObject
  2. In Inspector, assign all the UI elements to their respective fields:
    - Honey Text â†’ HoneyText TextMeshPro component
    - Pollen Text â†’ PollenText TextMeshPro component
    - etc.

  3.4 NotificationSystem Setup

  Create NotificationSystem:
  1. Right-click on UI Canvas â†’ UI â†’ Empty
  2. Name: NotificationSystem
  3. Add Component: NotificationSystem.cs

  Create Notification UI Structure:
  NotificationSystem
  â”œâ”€â”€ NotificationPanel (UI â†’ Panel)
  â”‚   â”œâ”€â”€ NotificationScrollView (UI â†’ Scroll View)
  â”‚   â”‚   â”œâ”€â”€ Viewport
  â”‚   â”‚   â”‚   â””â”€â”€ Content (with Content Size Fitter)
  â”‚   â”‚   â””â”€â”€ Scrollbar Vertical
  â”‚   â””â”€â”€ NotificationCountText (UI â†’ Text - TextMeshPro)
  â””â”€â”€ NotificationPrefab (Create as Prefab)
      â”œâ”€â”€ NotificationBackground (UI â†’ Image)
      â”œâ”€â”€ NotificationText (UI â†’ Text - TextMeshPro)
      â””â”€â”€ CloseButton (UI â†’ Button)

  Create Notification Prefab:
  1. Create the NotificationPrefab structure above
  2. Drag to Project folder to create prefab
  3. Delete from scene
  4. Assign prefab to NotificationSystem script

  3.5 CommandPanel Setup

  Create CommandPanel:
  1. Right-click on UI Canvas â†’ UI â†’ Empty
  2. Name: CommandPanel
  3. Add Component: CommandPanel.cs

  Create Command UI Structure:
  CommandPanel
  â”œâ”€â”€ BuildCommandsPanel (UI â†’ Panel)
  â”‚   â”œâ”€â”€ BuildBasicCellButton (UI â†’ Button)
  â”‚   â”œâ”€â”€ BuildNurseryCellButton (UI â†’ Button)
  â”‚   â”œâ”€â”€ BuildHoneyStorageButton (UI â†’ Button)
  â”‚   â””â”€â”€ BuildPollenStorageButton (UI â†’ Button)
  â”œâ”€â”€ RoleAssignmentPanel (UI â†’ Panel)
  â”‚   â”œâ”€â”€ RoleAssignmentDropdown (UI â†’ Dropdown - TextMeshPro)
  â”‚   â”œâ”€â”€ AssignRoleButton (UI â†’ Button)
  â”‚   â””â”€â”€ SelectedBeeInfoText (UI â†’ Text - TextMeshPro)
  â”œâ”€â”€ ForagingCommandsPanel (UI â†’ Panel)
  â”‚   â”œâ”€â”€ StartPioneerButton (UI â†’ Button)
  â”‚   â”œâ”€â”€ DispatchForagersButton (UI â†’ Button)
  â”‚   â””â”€â”€ ForagingTargetDropdown (UI â†’ Dropdown - TextMeshPro)
  â”œâ”€â”€ ColonyCommandsPanel (UI â†’ Panel)
  â”‚   â”œâ”€â”€ ThermoregulateButton (UI â†’ Button)
  â”‚   â”œâ”€â”€ FeedQueenButton (UI â†’ Button)
  â”‚   â””â”€â”€ FeedLarvaeButton (UI â†’ Button)
  â””â”€â”€ GameControlsPanel (UI â†’ Panel)
      â”œâ”€â”€ PauseButton (UI â†’ Button)
      â”œâ”€â”€ SpeedUpButton (UI â†’ Button)
      â”œâ”€â”€ SpeedDownButton (UI â†’ Button)
      â””â”€â”€ GameSpeedText (UI â†’ Text - TextMeshPro)

  3.6 Hive Structure Setup

  Create Hive Container:
  1. Right-click in Hierarchy â†’ Create Empty
  2. Name: Hive
  3. Position: (0, 0, 0)

  Create HiveCells Container:
  1. Right-click on Hive â†’ Create Empty
  2. Name: HiveCells
  3. Position: (0, 0, 0)

  Create BeeSpawnPoint:
  1. Right-click on Hive â†’ Create Empty
  2. Name: BeeSpawnPoint
  3. Position: (0, 0, 0)
  4. Add Component: Transform (should be there by default)

  3.7 Create HiveCell Prefab

  Create HiveCell Prefab:
  1. Right-click in Hierarchy â†’ 2D Object â†’ Sprite
  2. Name: HiveCell
  3. Add Components:
    - HiveCell.cs script
    - Collider2D (Box Collider 2D or Circle Collider 2D)
    - SpriteRenderer (should be there)

  HiveCell Structure:
  HiveCell (Prefab)
  â”œâ”€â”€ CellSprite (SpriteRenderer)
  â”œâ”€â”€ ConstructionIndicator (GameObject with SpriteRenderer)
  â”œâ”€â”€ TemperatureIndicator (GameObject with SpriteRenderer)
  â””â”€â”€ BroodSlot (Empty GameObject for brood placement)

  Save as Prefab:
  1. Drag HiveCell to Project folder
  2. Delete from scene
  3. This creates a reusable prefab

  3.8 Create Bee Prefabs

  Create Worker Bee Prefab:
  1. Right-click in Hierarchy â†’ 2D Object â†’ Sprite
  2. Name: WorkerBee
  3. Add Components:
    - Bee.cs script
    - Collider2D (Circle Collider 2D)
    - Rigidbody2D (if physics needed)
    - SpriteRenderer

  Create Queen Bee Prefab:
  1. Right-click in Hierarchy â†’ 2D Object â†’ Sprite
  2. Name: QueenBee
  3. Add Components:
    - QueenBee.cs script
    - Collider2D (Circle Collider 2D)
    - Rigidbody2D (if physics needed)
    - SpriteRenderer

  Save as Prefabs:
  1. Drag both to Project folder
  2. Delete from scene

  3.9 Create Brood Prefabs

  Create Brood Prefabs:
  1. Create three sprites: Egg, Larva, Pupa
  2. Each should have:
    - Brood.cs script
    - SpriteRenderer
    - Collider2D

  Brood Configuration:
  - Set different sprites for each stage
  - Configure stage durations in script
  - Save as separate prefabs

  3.10 External Map Setup

  Create ExternalMap:
  1. Right-click in Hierarchy â†’ Create Empty
  2. Name: ExternalMap
  3. Position: (0, 0, 0)
  4. Add Component: ExternalMapController.cs

  Create Resource Node Structure:
  ExternalMap
  â”œâ”€â”€ ResourceNodes (Empty GameObject - Container)
  â”œâ”€â”€ Hazards (Empty GameObject - Container)
  â””â”€â”€ MapBoundaries (Empty GameObject)

  Create Resource Node Prefabs:
  1. Create HoneySource sprite with:
    - SpriteRenderer
    - Collider2D
    - Resource node identifier script/component
  2. Create PollenSource sprite with same components

  Create Hazard Prefabs:
  1. Create SpiderWeb sprite
  2. Create WindZone sprite
  3. Both should have SpriteRenderer and Collider2D

  3.11 Camera Setup

  Main Camera Configuration:
  1. Select Main Camera
  2. Set Tag: MainCamera
  3. Configure for 2D:
    - Projection: Orthographic
    - Size: 10 (adjust as needed)
    - Position: (0, 0, -10)

  4. Script Assignment and Configuration

  4.1 GameManager Script Configuration

  Select GameManager GameObject:
  1. GameManager Component:
    - Current State: MainMenu
    - (Other managers auto-assigned)
  2. BeeManager Component:
    - Max Bee Population: 100
    - Worker Bee Prefab: Drag WorkerBee prefab
    - Queen Bee Prefab: Drag QueenBee prefab
    - Starting Worker Bees: 10
    - Starting Queen Bees: 1
    - Bee Spawn Point: Drag BeeSpawnPoint GameObject
  3. TaskManager Component:
    - Max Concurrent Tasks: 20
    - Task Update Interval: 1
    - Auto Generate Tasks: true
    - Task Generation Interval: 5
  4. ConfigurationManager Component:
    - Game Configuration: Create GameConfiguration asset (see below)
    - Allow Runtime Changes: true
    - Save Changes To File: true

  4.2 Create GameConfiguration Asset

  Create Configuration Asset:
  1. Right-click in Project â†’ Create â†’ Mellifera â†’ Game Configuration
  2. Name: GameConfiguration
  3. Configure all parameters as needed
  4. Assign to ConfigurationManager

  4.3 ExternalMapController Configuration

  Select ExternalMap GameObject:
  1. ExternalMapController Component:
    - Map Size: (100, 20)
    - Hive Entrance Position: (0, 0, 0)
    - Ground Layer: Default
    - Honey Source Prefab: Drag HoneySource prefab
    - Pollen Source Prefab: Drag PollenSource prefab
    - Spider Web Prefab: Drag SpiderWeb prefab
    - Wind Zone Prefab: Drag WindZone prefab
    - Bee Speed: 5
    - Max Concurrent Foragers: 10

  4.4 Final GameObject References

  Link GameManager to ExternalMap:
  1. Select GameManager
  2. In GameManager component, assign External Map Controller field to ExternalMap GameObject

  5. Testing Setup

  5.1 Create Test Scene

  1. Add some initial HiveCells:
    - Drag HiveCell prefab into HiveCells container
    - Create 3-4 cells in a hexagonal pattern
    - Set different cell types (Nursery, Storage, etc.)
  2. Position UI elements:
    - ResourceDisplayUI: Top of screen
    - CommandPanel: Bottom of screen
    - NotificationSystem: Right side of screen
  3. Set up camera bounds:
    - Position camera to view the hive
    - Adjust orthographic size as needed

  5.2 Input Setup

  1. Create Input Actions:
    - Use the Input System package
    - Create actions for mouse clicks, keyboard shortcuts
    - Assign to appropriate scripts

  6. Build Settings

  1. File â†’ Build Settings
  2. Add Open Scenes
  3. Platform: PC, Mac & Linux Standalone
  4. Architecture: x86_64

  7. Final Checklist

  âœ… GameManager with all core scripts attachedâœ… UI Canvas with ResourceDisplayUI, NotificationSystem,
  CommandPanelâœ… Hive structure with HiveCells container and BeeSpawnPointâœ… ExternalMap with ResourceNodes and
  Hazards containersâœ… All prefabs created: WorkerBee, QueenBee, HiveCell, Brood stagesâœ… GameConfiguration asset
  created and assignedâœ… Camera positioned for 2D gameplayâœ… All script references assigned in Inspector

  8. Testing the Setup

  1. Press Play
  2. Check Console for errors
  3. Verify UI displays resources and time
  4. Test basic interactions (clicking, button responses)
  5. Verify bee spawning and lifecycle

  This setup provides a complete foundation for the Mellifera: Hive OS prototype with all systems properly
  connected and configured!
